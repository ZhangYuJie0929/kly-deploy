---
- name: check bridge_exits is exit
  shell: nmcli connection show {{ single_net_bridge_name }}
  register: bridge_exits
  ignore_errors: true

- name: get external_manage_ip netmask
  shell: nmcli device show {{ api_interface }} | grep IP4.ADDRESS | awk '{print $2}' | grep {{ external_manage_ip }}
  register: net_result
  when: bridge_exits is failed

- name: set external_manage_netmask
  set_fact:
    external_manage_netmask: "{{ net_result.stdout.split('/')[-1] }}"
  failed_when: external_manage_netmask == ""
  when: bridge_exits is failed
  
- name: get external_manage_ip netmask
  shell: nmcli device show {{ single_net_bridge_name }} | grep IP4.ADDRESS | awk '{print $2}' | grep {{ external_manage_ip }}
  register: bridge_result
  when: bridge_exits is success

- name: set external_manage_netmask
  set_fact:
    external_manage_netmask: "{{ bridge_result.stdout.split('/')[-1] }}"
  failed_when: external_manage_netmask == ""
  when: bridge_exits is success

- name: Copy add-tap.sh
  template:
    src: single_net.sh.j2
    dest: /home/single_net.sh
    mode: 0755

- name: exec single net scripts
  shell: /home/single_net.sh {{ ansible_default_ipv4.interface }} {{ single_net_bridge_name }} {{ ansible_default_ipv4.address }} {{ ansible_default_ipv4.gateway }}
  ignore_errors: true

- name: Get nmcli con bridge name
  shell: nmcli con show | grep "{{ single_net_bridge_name }}" | awk '{print $1" "$2}'
  register: nmcli_bridge_name

- name: Set bridge name
  set_fact:
    bridge_name: "Bridge {{ single_net_bridge_name }}"

- name: edit bridge br name
  shell: nmcli con mod "{{ bridge_name }}" connection.id {{ single_net_bridge_name }}
  when:
    - nmcli_bridge_name.stdout == "{{ bridge_name }}"

- name: Copy inventory file
  copy:
    src: "{{ inventory_file }}"
    dest: "{{ inventory_file }}_{{ ansible_date_time.epoch }}"
    owner: root
    mode: 0644
  run_once: True
  delegate_to: "{{ groups['baremetal'][0] }}"

- name: Replace the api_interface name in the host file
  replace:
    path: "{{ inventory_file }}"
    regexp: '{{ hostvars[item].api_interface }}'
    replace: '{{ single_net_bridge_name }}'
  run_once: True
  delegate_to: "{{ groups['baremetal'][0] }}"
  with_items: "{{ groups['baremetal'] }}"
